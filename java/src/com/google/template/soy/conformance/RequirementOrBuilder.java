// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: src/main/protobuf/conformance.proto
// Protobuf Java Version: 4.28.2

package com.google.template.soy.conformance;

public interface RequirementOrBuilder extends
    // @@protoc_insertion_point(interface_extends:soy.Requirement)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.soy.Requirement.BannedCssSelector banned_css_selector = 2;</code>
   * @return Whether the bannedCssSelector field is set.
   */
  boolean hasBannedCssSelector();
  /**
   * <code>.soy.Requirement.BannedCssSelector banned_css_selector = 2;</code>
   * @return The bannedCssSelector.
   */
  com.google.template.soy.conformance.Requirement.BannedCssSelector getBannedCssSelector();
  /**
   * <code>.soy.Requirement.BannedCssSelector banned_css_selector = 2;</code>
   */
  com.google.template.soy.conformance.Requirement.BannedCssSelectorOrBuilder getBannedCssSelectorOrBuilder();

  /**
   * <code>.soy.Requirement.BannedFunction banned_function = 3;</code>
   * @return Whether the bannedFunction field is set.
   */
  boolean hasBannedFunction();
  /**
   * <code>.soy.Requirement.BannedFunction banned_function = 3;</code>
   * @return The bannedFunction.
   */
  com.google.template.soy.conformance.Requirement.BannedFunction getBannedFunction();
  /**
   * <code>.soy.Requirement.BannedFunction banned_function = 3;</code>
   */
  com.google.template.soy.conformance.Requirement.BannedFunctionOrBuilder getBannedFunctionOrBuilder();

  /**
   * <code>.soy.Requirement.BannedDirective banned_directive = 4;</code>
   * @return Whether the bannedDirective field is set.
   */
  boolean hasBannedDirective();
  /**
   * <code>.soy.Requirement.BannedDirective banned_directive = 4;</code>
   * @return The bannedDirective.
   */
  com.google.template.soy.conformance.Requirement.BannedDirective getBannedDirective();
  /**
   * <code>.soy.Requirement.BannedDirective banned_directive = 4;</code>
   */
  com.google.template.soy.conformance.Requirement.BannedDirectiveOrBuilder getBannedDirectiveOrBuilder();

  /**
   * <code>.soy.Requirement.BannedRawText banned_raw_text = 5;</code>
   * @return Whether the bannedRawText field is set.
   */
  boolean hasBannedRawText();
  /**
   * <code>.soy.Requirement.BannedRawText banned_raw_text = 5;</code>
   * @return The bannedRawText.
   */
  com.google.template.soy.conformance.Requirement.BannedRawText getBannedRawText();
  /**
   * <code>.soy.Requirement.BannedRawText banned_raw_text = 5;</code>
   */
  com.google.template.soy.conformance.Requirement.BannedRawTextOrBuilder getBannedRawTextOrBuilder();

  /**
   * <code>.soy.Requirement.Custom custom = 7;</code>
   * @return Whether the custom field is set.
   */
  boolean hasCustom();
  /**
   * <code>.soy.Requirement.Custom custom = 7;</code>
   * @return The custom.
   */
  com.google.template.soy.conformance.Requirement.Custom getCustom();
  /**
   * <code>.soy.Requirement.Custom custom = 7;</code>
   */
  com.google.template.soy.conformance.Requirement.CustomOrBuilder getCustomOrBuilder();

  /**
   * <code>.soy.Requirement.BannedHtmlTag banned_html_tag = 11;</code>
   * @return Whether the bannedHtmlTag field is set.
   */
  boolean hasBannedHtmlTag();
  /**
   * <code>.soy.Requirement.BannedHtmlTag banned_html_tag = 11;</code>
   * @return The bannedHtmlTag.
   */
  com.google.template.soy.conformance.Requirement.BannedHtmlTag getBannedHtmlTag();
  /**
   * <code>.soy.Requirement.BannedHtmlTag banned_html_tag = 11;</code>
   */
  com.google.template.soy.conformance.Requirement.BannedHtmlTagOrBuilder getBannedHtmlTagOrBuilder();

  /**
   * <code>.soy.Requirement.BanXidForCssObfuscation ban_xid_for_css_obfuscation = 14;</code>
   * @return Whether the banXidForCssObfuscation field is set.
   */
  boolean hasBanXidForCssObfuscation();
  /**
   * <code>.soy.Requirement.BanXidForCssObfuscation ban_xid_for_css_obfuscation = 14;</code>
   * @return The banXidForCssObfuscation.
   */
  com.google.template.soy.conformance.Requirement.BanXidForCssObfuscation getBanXidForCssObfuscation();
  /**
   * <code>.soy.Requirement.BanXidForCssObfuscation ban_xid_for_css_obfuscation = 14;</code>
   */
  com.google.template.soy.conformance.Requirement.BanXidForCssObfuscationOrBuilder getBanXidForCssObfuscationOrBuilder();

  /**
   * <pre>
   * Required: The message to report when a requirement is violated.
   * This should reference a document describing the reason for the requirement
   * and contacts.
   * </pre>
   *
   * <code>string error_message = 8;</code>
   * @return The errorMessage.
   */
  java.lang.String getErrorMessage();
  /**
   * <pre>
   * Required: The message to report when a requirement is violated.
   * This should reference a document describing the reason for the requirement
   * and contacts.
   * </pre>
   *
   * <code>string error_message = 8;</code>
   * @return The bytes for errorMessage.
   */
  com.google.protobuf.ByteString
      getErrorMessageBytes();

  /**
   * <pre>
   * Optional: Any source path that contains a exempted substring is exempt
   * from the requirement.
   * </pre>
   *
   * <code>repeated string exempt = 16;</code>
   * @return A list containing the exempt.
   */
  java.util.List<java.lang.String>
      getExemptList();
  /**
   * <pre>
   * Optional: Any source path that contains a exempted substring is exempt
   * from the requirement.
   * </pre>
   *
   * <code>repeated string exempt = 16;</code>
   * @return The count of exempt.
   */
  int getExemptCount();
  /**
   * <pre>
   * Optional: Any source path that contains a exempted substring is exempt
   * from the requirement.
   * </pre>
   *
   * <code>repeated string exempt = 16;</code>
   * @param index The index of the element to return.
   * @return The exempt at the given index.
   */
  java.lang.String getExempt(int index);
  /**
   * <pre>
   * Optional: Any source path that contains a exempted substring is exempt
   * from the requirement.
   * </pre>
   *
   * <code>repeated string exempt = 16;</code>
   * @param index The index of the value to return.
   * @return The bytes of the exempt at the given index.
   */
  com.google.protobuf.ByteString
      getExemptBytes(int index);

  /**
   * <pre>
   * Optional: A list of paths. If this field is presented, the conformance
   * test is only running for the files matching the paths specified here.
   * exmempted sources will still be exempted.
   * </pre>
   *
   * <code>repeated string only_apply_to = 15;</code>
   * @return A list containing the onlyApplyTo.
   */
  java.util.List<java.lang.String>
      getOnlyApplyToList();
  /**
   * <pre>
   * Optional: A list of paths. If this field is presented, the conformance
   * test is only running for the files matching the paths specified here.
   * exmempted sources will still be exempted.
   * </pre>
   *
   * <code>repeated string only_apply_to = 15;</code>
   * @return The count of onlyApplyTo.
   */
  int getOnlyApplyToCount();
  /**
   * <pre>
   * Optional: A list of paths. If this field is presented, the conformance
   * test is only running for the files matching the paths specified here.
   * exmempted sources will still be exempted.
   * </pre>
   *
   * <code>repeated string only_apply_to = 15;</code>
   * @param index The index of the element to return.
   * @return The onlyApplyTo at the given index.
   */
  java.lang.String getOnlyApplyTo(int index);
  /**
   * <pre>
   * Optional: A list of paths. If this field is presented, the conformance
   * test is only running for the files matching the paths specified here.
   * exmempted sources will still be exempted.
   * </pre>
   *
   * <code>repeated string only_apply_to = 15;</code>
   * @param index The index of the value to return.
   * @return The bytes of the onlyApplyTo at the given index.
   */
  com.google.protobuf.ByteString
      getOnlyApplyToBytes(int index);

  com.google.template.soy.conformance.Requirement.RequirementTypeCase getRequirementTypeCase();
}
